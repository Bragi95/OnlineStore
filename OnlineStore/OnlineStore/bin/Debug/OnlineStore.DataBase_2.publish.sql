/*
Deployment script for OnlineStore.Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "OnlineStore.Database"
:setvar DefaultFilePrefix "OnlineStore.Database"
:setvar DefaultDataPath "K:\SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "K:\SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[MergeOrder]...';


GO
CREATE PROCEDURE [dbo].[MergeOrder]
	@id int = null,
	@CustomerId int = null,
	@PaymentTypeId int =null,
	@StatusOrderId int = null,
	@TotalCost decimal = null,	
	@quantity int = null
AS
declare @result int
set @result = @id
Merge dbo.[Order] AS O
using (select
	   @id,
	   @CustomerId,
	   @PaymentTypeId ,
	   @StatusOrderId, 	   
	   @TotalCost)
as sourse (
	   id,
	   CustomerId,
	   PaymentTypeId,
	   StatusOrderId,
	   TotalCost)
on (O.Id = sourse.Id)
WHEN MATCHED THEN 
update   set
		PaymentTypeId = @PaymentTypeId,	 
		StatusOrderId = @StatusOrderId,
		TotalCost = @TotalCost
WHEN NOT MATCHED THEN	
insert  (
	    CustomerId,
	    PaymentTypeId,
	    StatusOrderId,
		DateOrder,
	    TotalCost)
values(
	    @CustomerId,
	    @PaymentTypeId ,
	    @StatusOrderId, 
	    Sysdatetime(),
	    @TotalCost);  
if(@result is NUll) set  @result = SCOPE_IDENTITY()

exec SelectOrderById @result
GO
PRINT N'Creating [dbo].[SelectAllCustomers]...';


GO
CREATE PROCEDURE [dbo].[SelectAllCustomers]	
AS
	SELECT Cu.Id, Cu.Name, Cu.LastName, Cu.Phone, Cu.Email, R.Id, R.Name, C.Id, C.Name as Country,Cy.Id,  Cy.Name as City from dbo.Customer AS Cu
	join dbo.Country as C on C.id = Cu.CountryId
	join dbo.City as Cy on Cy.id = Cu.CityId
	join dbo.Role as R on R.id = Cu.RoleId
GO
PRINT N'Creating [dbo].[TransferGoods]...';


GO
CREATE PROCEDURE [dbo].[TransferGoods]
@sendler int,
	@GoodsId int,
	@recipiend int,
	@Quantity int
AS
declare
@sendlerId int,
@recipiendId int
if exists(  select * from dbo.Goods_Storage as GS where GS.GoodsId = @GoodsId and StorageId = @sendler and (GS.QuantityGoods - @Quantity) > 0)
begin
	Update dbo.Goods_Storage
	set
		QuantityGoods -= @Quantity,
		@sendlerId = Id
	where GoodsId = @GoodsId and StorageId = @sendler
end
else  THROW 404, 'The product is not available in this store', 1;  

if exists(  select * from dbo.Goods_Storage as GS where GS.GoodsId = @GoodsId and StorageId = @recipiend )
begin
	Update dbo.Goods_Storage 
	set
		QuantityGoods += @Quantity,
		@recipiendId = id
	where GoodsId = @GoodsId and StorageId = @recipiend
end
else
 begin
	insert into dbo.Goods_Storage
	values(@GoodsId,@recipiend,@Quantity)
 set @recipiendId = SCOPE_IDENTITY()
end

select @sendlerId, @recipiendId
GO
PRINT N'Update complete.';


GO
