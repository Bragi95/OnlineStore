/*
Deployment script for OnlineStore.DataBase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "OnlineStore.DataBase"
:setvar DefaultFilePrefix "OnlineStore.DataBase"
:setvar DefaultDataPath "K:\SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "K:\SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[FeedBack].[CustomerId] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[FeedBack])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[Order].[CustomerId] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Order])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Starting rebuilding table [dbo].[FeedBack]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_FeedBack] (
    [Id]        INT             IDENTITY (1, 1) NOT NULL,
    [UserId]    INT             NULL,
    [GoodsId]   INT             NULL,
    [StorageId] INT             NULL,
    [Message]   NVARCHAR (2000) NULL,
    [Date]      DATE            NULL,
    [Rating]    INT             NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[FeedBack])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_FeedBack] ON;
        INSERT INTO [dbo].[tmp_ms_xx_FeedBack] ([Id], [GoodsId], [StorageId], [Message], [Date], [Rating])
        SELECT   [Id],
                 [GoodsId],
                 [StorageId],
                 [Message],
                 [Date],
                 [Rating]
        FROM     [dbo].[FeedBack]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_FeedBack] OFF;
    END

DROP TABLE [dbo].[FeedBack];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_FeedBack]', N'FeedBack';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Order]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Order] (
    [Id]            INT         IDENTITY (1, 1) NOT NULL,
    [UserId]        INT         NULL,
    [StorageId]     INT         NULL,
    [PaymentTypeId] INT         NULL,
    [StatusOrderId] INT         NULL,
    [DateOrder]     DATE        NULL,
    [TotalCost]     DECIMAL (4) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Order])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Order] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Order] ([Id], [StorageId], [PaymentTypeId], [StatusOrderId], [DateOrder], [TotalCost])
        SELECT   [Id],
                 [StorageId],
                 [PaymentTypeId],
                 [StatusOrderId],
                 [DateOrder],
                 [TotalCost]
        FROM     [dbo].[Order]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Order] OFF;
    END

DROP TABLE [dbo].[Order];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Order]', N'Order';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [Name]      NVARCHAR (30)  NULL,
    [LastName]  NVARCHAR (30)  NULL,
    [Email]     NVARCHAR (30)  NULL,
    [Phone]     NVARCHAR (30)  NULL,
    [Address]   NVARCHAR (30)  NULL,
    [CountryId] INT            NULL,
    [CityId]    INT            NULL,
    [Password]  NVARCHAR (100) NULL,
    [RoleId]    INT            NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[User]...';


GO
ALTER TABLE [dbo].[User]
    ADD DEFAULT 1 FOR [RoleId];


GO
PRINT N'Altering [dbo].[MergeOrder]...';


GO
ALTER PROCEDURE [dbo].[MergeOrder]
	@id int = null,
	@UserId int = null,
	@PaymentTypeId int = null,
	@StatusOrderId int = null,
	@StorageId int = null,
	@TotalCost decimal = null	
	
AS
declare @result int
set @result = @id
Merge dbo.[Order] AS O
using (select
	   @id,
	   @UserId,
	   @PaymentTypeId ,
	   @StorageId,
	   @StatusOrderId, 	   
	   @TotalCost)
as sourse (
	   id,
	   UserId,
	   PaymentTypeId,
	   StorageId,
	   StatusOrderId,
	   TotalCost)
on (O.Id = sourse.Id)
WHEN MATCHED THEN 
update   set
		PaymentTypeId = @PaymentTypeId,	 
		StatusOrderId = @StatusOrderId,
		StorageId = @StorageId,
		TotalCost = @TotalCost
WHEN NOT MATCHED THEN	
insert  (
	    UserId,
	    PaymentTypeId,
		StorageId,
	    StatusOrderId,
		DateOrder,
	    TotalCost)
values(
	    @UserId,
	    @PaymentTypeId ,
		@StorageId,
	    @StatusOrderId, 
	    Sysdatetime(),
	    @TotalCost);  
if(@result is NUll) set  @result = SCOPE_IDENTITY()

select 
	o.id, O.DateOrder, O.TotalCost,
    S.Id, S.Name, S.CityId, S.Address, S.Phone,
    PT.Id,  PT.Name,
    SO.Id,  SO.Name, 
    U. Id, U.Name, U.LastName, U.Address, U.Phone    
 from dbo.[Order] as O
	left join dbo.[User] as U on U.Id = O.UserId
	left join dbo.Storage as S on S.Id = O.StorageId
	left join dbo.PaymentType as PT on PT.Id = O.PaymentTypeId
	left join dbo.StatusOrder as SO on So.Id = O.StatusOrderId
where O.Id = @result
GO
PRINT N'Altering [dbo].[SelectOrderById]...';


GO
ALTER PROCEDURE [dbo].[SelectOrderById]
@orderId int 
	
AS
select 
	OG.Id , Og.quantityGoods,	
	o.id, O.TotalCost, O.DateOrder,
    S.Id, S.Name, S.CityId, S.Address, S.Phone,
    PT.Id,  PT.Name,
    SO.Id,  SO.Name, 
    U. Id, U.Name, U.LastName, U.Address, U.Phone  ,  
    G.Id, G.Brand, G.Model,G.PowerConsumption,G.Weight,G.YearOfManufacture, g.Price 
 from dbo.[Order] as O
    left join dbo.Order_Goods as OG on Og.orderId = O.Id
	left join dbo.Goods as G on G.Id = OG.goodsId
	join dbo.[User] as U on U.Id = O.UserId
	join dbo.Storage as S on S.Id = O.StorageId
	join dbo.PaymentType as PT on PT.Id = O.PaymentTypeId
	join dbo.StatusOrder as SO on So.Id = O.StatusOrderId
where O.Id = @orderId
GO
PRINT N'Altering [dbo].[SelectOrderByStorageId]...';


GO
ALTER PROCEDURE [dbo].[SelectOrderByStorageId]
 @StorageId int 
AS
select 
	OG.Id , Og.quantityGoods,	
	o.id, 
    S.Id, S.Name, S.CityId, S.Address, S.Phone,
    PT.Id,  PT.Name,
    SO.Id,  SO.Name, 
    U. Id, U.Name, U.LastName, U.Address, U.Phone  ,  
    G.Id, G.Brand, G.Model,G.PowerConsumption,G.Weight,G.YearOfManufacture, g.Price 
 from dbo.[Order] as O
    left join dbo.Order_Goods as OG on Og.orderId = O.Id
	left join dbo.Goods as G on G.Id = OG.goodsId
	join dbo.[User] as U on U.Id = O.UserId
	join dbo.Storage as S on S.Id = O.StorageId
	join dbo.PaymentType as PT on PT.Id = O.PaymentTypeId
	join dbo.StatusOrder as SO on So.Id = O.StatusOrderId
where O.StorageId = @StorageId
GO
PRINT N'Altering [dbo].[SearchGoods]...';


GO
ALTER PROCEDURE [dbo].[SearchGoods]
@Id INT = null,
	@Brand nvarchar (30) = null,		
	@Model nvarchar (100) = null,		
	@CountryId int =  null,	
	@YearOfManufactureStart date = null,
	@YearOfManufactureEnd date = null,	
	@PowerConsumptionStart float = null,
	@PowerConsumptionEnd float = null,
	@RemoteStart bit = null,
	@NumberOfOperatingModes  int = null,
	@VolumeOfTheDustContainer float = null,
	@VolumeOfTheLiquidTank float = null,
	@AutomaticCleaning bit = null,
	@BodyMaterial nvarchar (30) = null,
	@TemperatureMaintenance bit = null,
	@ChamberVolume float = null,
	@InnerCoating nvarchar(30) = null,
	@BowlVolume float = null,
	@TypeOfHeating nvarchar(30) = null,
	@MaxLoading float = null,
	@TheVolumeOfTheDrum float= null,
	@DryerMode bit = null,
	@ColorId nvarchar(30) = null,
	@PriceStart decimal = null,
	@PriceEnd decimal = null
AS
begin
	DECLARE @resultSQL nvarchar (max) = '
	SELECT 		
		G.Id ,	
		G.Brand ,
		G.Model ,		
		G.YearOfManufacture,
		G.[Weight] ,
		G.PowerConsumption,
		G.RemoteStart ,
		G.NumberOfOperatingModes  ,
		G.VolumeOfTheDustContainer ,
		G.VolumeOfTheLiquidTank ,
		G.AutomaticCleaning,
		G.BodyMaterial ,
		G.TemperatureMaintenance ,
		G.ChamberVolume,
		G.InnerCoating ,
		G.BowlVolume ,
		G.TypeOfHeating ,
		G.MaxLoading ,
		G.TheVolumeOfTheDrum ,
		G.DryerMode ,
		G.Price,
		C.Id,C.name,
		Co.Id,Co.Name
    FROM    [dbo].[Goods] as G
	inner JOIN dbo.[Country] as C on G.[CountryId] = C.Id
	join dbo.Color as Co on Co.id = G.ColorId	
    WHERE   (1=1)'
	
	if( @Id IS NOT NULL)
		begin 
			set @resultSQL += ' and G.[Id] = ' + CONVERT(nvarchar, @Id)
		end	
	if( @Brand IS NOT NULL)
		begin      
			set @resultSQL += ' and G.Brand LIKE ' + '''%' + CONVERT(nvarchar(50), @Brand) + '%'''     
		end 
	if( @Model IS NOT NULL)
		begin      
			set @resultSQL += ' and G.Model LIKE ' + '''%' + CONVERT(nvarchar(50), @Model) + '%'''     
    end 
    if( @BodyMaterial IS NOT NULL)
		begin    
			set @resultSQL += ' and G.BodyMaterial LIKE ' + '''%' + CONVERT(nvarchar(50), @BodyMaterial) + '%'''     
		end
	if( @YearOfManufactureStart IS NOT NULL)
		begin
			set @resultSQL += ' and (G.YearOfManufacture BETWEEN '+ '''' 
			+ CONVERT(nvarchar, @YearOfManufactureStart) + ''' AND ' + '''' 
			+ CONVERT(nvarchar, @YearOfManufactureEnd) + ''')'
		end
    if( @InnerCoating IS NOT NULL)
		begin     
			set @resultSQL += ' and G.InnerCoating LIKE ' + '''%' + CONVERT(nvarchar(50), @InnerCoating) + '%'''      
		end
    if( @TypeOfHeating IS NOT NULL)
		begin     
			if(@TypeOfHeating !='0') set @resultSQL += ' and G.TypeOfHeating LIKE ' + '''%' + CONVERT(nvarchar(50), @TypeOfHeating) + '%'''  
			else set @resultSQL += ' and G.TypeOfHeating  != null'
		end
	if( @CountryId IS NOT NULL)
		begin
			set @resultSQL += ' and G.CountryId = ' + CONVERT(nvarchar(50), @CountryId)
		end
	if( @RemoteStart IS NOT NULL)
		begin
			set @resultSQL += ' and G.RemoteStart = ' + CONVERT(nvarchar, @RemoteStart)
		end
	if( @NumberOfOperatingModes IS NOT NULL)
		begin
			set @resultSQL += ' and G.NumberOfOperatingModes = ' + CONVERT(nvarchar, @NumberOfOperatingModes)
		end
	if( @PowerConsumptionStart IS NOT NULL)
		begin
			set @resultSQL += ' and (G.PowerConsumption BETWEEN '+ '''' 
			+ CONVERT(nvarchar, @PowerConsumptionStart) + ''' AND ' + '''' 
			+ CONVERT(nvarchar, @PowerConsumptionEnd) + ''')'
		end
	if( @VolumeOfTheDustContainer IS NOT NULL)
		begin
			if(@VolumeOfTheDustContainer != 0)set @resultSQL += ' and G.VolumeOfTheDustContainer = ' + CONVERT(nvarchar, @VolumeOfTheDustContainer)
			else set @resultSQL += ' and G.VolumeOfTheLiquidTank != null'
		end
	if( @VolumeOfTheLiquidTank IS NOT NULL)
		begin
			set @resultSQL += ' and G.VolumeOfTheLiquidTank = ' + CONVERT(nvarchar, @VolumeOfTheLiquidTank)
		end
	if( @AutomaticCleaning IS NOT NULL)
		begin
			set @resultSQL += ' and G.AutomaticCleaning = ' + CONVERT(nvarchar, @AutomaticCleaning)
		end
	if( @TemperatureMaintenance IS NOT NULL)
		begin
			set @resultSQL += ' and G.TemperatureMaintenance = ' + CONVERT(nvarchar, @TemperatureMaintenance)
		end
	if( @ChamberVolume IS NOT NULL)
		begin
			set @resultSQL += ' and G.ChamberVolume = ' + CONVERT(nvarchar, @ChamberVolume)
		end
	if( @BowlVolume IS NOT NULL)
		begin
			if(@BowlVolume != 0) set @resultSQL += ' and G.BowlVolume = ' + CONVERT(nvarchar, @BowlVolume)
			else set @resultSQL += ' and G.BowlVolume != null'
		end
	if( @TheVolumeOfTheDrum IS NOT NULL)
		begin
			set @resultSQL += ' and G.TheVolumeOfTheDrum = ' + CONVERT(nvarchar, @TheVolumeOfTheDrum)
		end
	if( @MaxLoading IS NOT NULL)
		begin
			set @resultSQL += ' and G.MaxLoading = ' + CONVERT(nvarchar, @MaxLoading)
		end
	if( @DryerMode IS NOT NULL)
		begin
			set @resultSQL += ' and G.DryerMode = ' + CONVERT(nvarchar, @DryerMode)
		end	
		if( @ColorID IS NOT NULL)
    begin    
      set @resultSQL += ' and G.ColorId LIKE ' + '''%' + CONVERT(nvarchar(50), @ColorId) + '%'''     
    end
	if( @PriceStart IS NOT NULL)
		begin
			set @resultSQL += ' and (G.Price BETWEEN '+ '''' 
			+ CONVERT(nvarchar, @PriceStart) + ''' AND ' + '''' 
			+ CONVERT(nvarchar, @PriceEnd) + ''')'
		end
		set @resultSQL += ' OPTION (RECOMPILE)'
		Print @resultSQL
		exec sp_executesql @resultSQL			
end
GO
PRINT N'Creating [dbo].[MergeUser]...';


GO
CREATE PROCEDURE [dbo].[MergeUser]
	@Id INT ,
	@Name nvarchar(30),
	@LastName nvarchar(30),
	@Email nvarchar(30),
	@Phone nvarchar(30),
	@Address nvarchar(30),
	@CountryId int,
	@Password nvarchar(100),
	@CityId int
AS
declare @result int
set @result = @Id
Merge dbo.[User] AS C
using (select
	@id,
	@Name,
	@LastName,
	@Email,
	@Phone,
	@Address,
	@CountryId,
	@Password,
	@CityId)
AS sourse(
	id,
	Name,
	LastName,
	Email,
	Phone,
	Address,
	CountryId,
	Password,
	CityId)
on(C.id = sourse.id)
WHEN MATCHED THEN
Update set
	Name = sourse.Name,
	LastName = sourse.LastName,
	Email = sourse.Email,
	Phone = sourse.Phone,
	Address = sourse.Address,
	CountryId = sourse.CountryId,
	CityId = sourse.CityId
WHEN NOT MATCHED THEN
insert (
	Name,
	LastName,
	Email,
	Phone,
	Address,
	CountryId,
	Password,
	CityId)
values (
	@Name,
	@LastName,
	@Email,
	@Phone,
	@Address,
	@CountryId,
	@Password,
	@CityId);

if (@result is null)set @result = SCOPE_IDENTITY()

exec SelectCustomerById @result
GO
PRINT N'Creating [dbo].[SelectAllUsers]...';


GO
CREATE PROCEDURE [dbo].[SelectAllUsers]	
AS
SELECT 
	U.Id, U.Name, U.LastName, U.Phone, U.Email, U.Address, 
	C.Id, C.Name,
	Cy.Id,  Cy.Name ,
	R.Id, R.Name
from dbo.[User] AS U
	join dbo.Country as C on C.id = U.CountryId
	join dbo.City as Cy on Cy.id = U.CityId
	join dbo.Role as R on R.id = U.RoleId
GO
PRINT N'Creating [dbo].[SelectOrderByUserId]...';


GO
CREATE PROCEDURE [dbo].[SelectOrderByUserId]
 @UserId int	
AS
select 
	OG.Id , Og.quantityGoods,	
	o.id, O.DateOrder, O.TotalCost,
    S.Id, S.Name, S.CityId, S.Address, S.Phone,
    PT.Id,  PT.Name,
    SO.Id,  SO.Name, 
    U. Id, U.Name, U.LastName, U.Address, U.Phone  ,  
    G.Id, G.Brand, G.Model,G.PowerConsumption,G.Weight,G.YearOfManufacture, g.Price 
 from dbo.[Order] as O
    left join dbo.Order_Goods as OG on Og.orderId = O.Id
	left join dbo.Goods as G on G.Id = OG.goodsId
	join dbo.[User] as U on U.Id = O.UserId
	join dbo.Storage as S on S.Id = O.StorageId
	join dbo.PaymentType as PT on PT.Id = O.PaymentTypeId
	join dbo.StatusOrder as SO on So.Id = O.StatusOrderId
where O.UserId = @UserId
GO
PRINT N'Creating [dbo].[SelectUserById]...';


GO
CREATE PROCEDURE [dbo].[SelectUserById]
	@id int
AS
SELECT 
	U.Id, U.Name, U.LastName, U.Phone, U.Email, U.Address, 
	C.Id, C.Name,
	Cy.Id,  Cy.Name ,
	R.Id, R.Name
from dbo.[User] AS U
	join dbo.Country as C on C.id = U.CountryId
	join dbo.City as Cy on Cy.id = U.CityId
	join dbo.Role as R on R.id = U.RoleId
Where U.Id = @Id
GO
PRINT N'Refreshing [dbo].[MergeOrder_Goods]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[MergeOrder_Goods]';


GO
PRINT N'Refreshing [dbo].[MergeGoods]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[MergeGoods]';


GO
PRINT N'Update complete.';


GO
