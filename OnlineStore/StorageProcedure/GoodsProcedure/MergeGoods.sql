CREATE PROCEDURE [dbo].[MergeGoods]
	@Id INT = null,
	@Brandid int  = null,	
	@CountryId int =  null,	
	@YearOfManufacture date = null,
	@Weight float = null,
	@PowerConsumption float = null,
	@RemoteStart bit = null,
	@NumberOfOperatingModes  int = null,
	@VolumeOfTheDustContainer float = null,
	@VolumeOfTheLiquidTank float = null,
	@AutomaticCleaning bit = null,
	@BodyMaterial nvarchar (30) = null,
	@TemperatureMaintenance bit = null,
	@ChamberVolume float = null,
	@InnerCoating nvarchar(30) = null,
	@BowlVolume float = null,
	@TypeOfHeating nvarchar(30) = null,
	@MaxLoading float = null,
	@TheVolumeOfTheDrum float= null,
	@DryerMode bit = null,
	@Color nvarchar(30) = null,
	@Price decimal = null
AS
	declare
@result bigint
set @result = @Id
	Merge dbo.[Goods] as G
	using (select 
		@Id,  
		@BrandId ,		
		@CountryId,	
		@YearOfManufacture,
		@Weight ,
		@PowerConsumption,
		@RemoteStart ,
		@NumberOfOperatingModes  ,
		@VolumeOfTheDustContainer ,
		@VolumeOfTheLiquidTank ,
		@AutomaticCleaning,
		@BodyMaterial ,
		@TemperatureMaintenance ,
		@ChamberVolume,
		@InnerCoating ,
		@BowlVolume ,
		@TypeOfHeating ,
		@MaxLoading ,
		@TheVolumeOfTheDrum ,
		@DryerMode ,
		@Color,
		@Price )
	As sourse (
		Id,  
		BrandId ,		
		CountryId,	
		YearOfManufacture,
		[Weight],
		PowerConsumption,
		RemoteStart ,
		NumberOfOperatingModes  ,
		VolumeOfTheDustContainer ,
		VolumeOfTheLiquidTank ,
		AutomaticCleaning,
		BodyMaterial ,
		TemperatureMaintenance ,
		ChamberVolume,
		InnerCoating ,
		BowlVolume ,
		TypeOfHeating ,
		MaxLoading ,
		TheVolumeOfTheDrum ,
		DryerMode ,
		Color,
		Price)
			on	(G.Id = sourse.Id) 
	When MATCHED THEN 
	Update  set		
		Id = sourse.Id,  
		BrandId = sourse.BrandId ,		
		CountryId = sourse.CountryId,	
		YearOfManufacture = sourse.YearOfManufacture,
		[Weight] = sourse.[Weight] ,
		PowerConsumption = sourse.PowerConsumption,
		RemoteStart = sourse.RemoteStart ,
		NumberOfOperatingModes = sourse.NumberOfOperatingModes  ,
		VolumeOfTheDustContainer = sourse.VolumeOfTheDustContainer,
		VolumeOfTheLiquidTank  = sourse.VolumeOfTheLiquidTank,
		AutomaticCleaning = sourse.AutomaticCleaning,
		BodyMaterial = sourse.BodyMaterial ,
		TemperatureMaintenance  = sourse.TemperatureMaintenance,
		ChamberVolume = sourse.ChamberVolume,
		InnerCoating = sourse.InnerCoating ,
		BowlVolume  = sourse.BowlVolume,
		TypeOfHeating  = sourse.TypeOfHeating,
		MaxLoading = sourse.MaxLoading ,
		TheVolumeOfTheDrum = sourse.TheVolumeOfTheDrum ,
		DryerMode = sourse.DryerMode ,
		Price = sourse.Price,
		Color = sourse.Color,
		
	WHEN NOT MATCHED THEN	
	insert (  
		BrandId ,		
		CountryId,	
		YearOfManufacture,
		[Weight] ,
		PowerConsumption,
		RemoteStart ,
		NumberOfOperatingModes  ,
		VolumeOfTheDustContainer ,
		VolumeOfTheLiquidTank ,
		AutomaticCleaning,
		BodyMaterial ,
		TemperatureMaintenance ,
		ChamberVolume,
		InnerCoating ,
		BowlVolume ,
		TypeOfHeating ,
		MaxLoading ,
		TheVolumeOfTheDrum ,
		DryerMode ,
		Color,
		Price) 
	values (		 
		sourse.BrandId ,			
		sourse.CountryId,	
		sourse.YearOfManufacture,
		sourse.[Weight] ,
		sourse.PowerConsumption,
		sourse.RemoteStart ,
		sourse.NumberOfOperatingModes  ,
		sourse.VolumeOfTheDustContainer,
		sourse.VolumeOfTheLiquidTank,
		sourse.AutomaticCleaning,
		sourse.BodyMaterial ,
		sourse.TemperatureMaintenance,
		sourse.ChamberVolume,
		sourse.InnerCoating ,
		sourse.BowlVolume,
		sourse.TypeOfHeating,
		sourse.MaxLoading ,
		sourse.TheVolumeOfTheDrum ,
		sourse.DryerMode ,
		sourse.Color,
		sourse.Price
	);
	If(@result is Null)set @result = SCOPE_IDENTITY()
	exec SearchGoods @result
