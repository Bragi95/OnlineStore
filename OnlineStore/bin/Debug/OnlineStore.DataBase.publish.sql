/*
Deployment script for OnlineStore.Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "OnlineStore.Database"
:setvar DefaultFilePrefix "OnlineStore.Database"
:setvar DefaultDataPath "K:\SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "K:\SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[Goods].[BrandId] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Goods])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[PaymentType].[Type] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[PaymentType])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__PowerCons__3B75D760];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__RemoteSta__3C69FB99];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__NumberOfO__3D5E1FD2];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__VolumeOfT__3E52440B];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__VolumeOfT__3F466844];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__Automatic__403A8C7D];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__BodyMater__412EB0B6];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__Temperatu__4222D4EF];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__ChamberVo__4316F928];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__InnerCoat__440B1D61];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__BowlVolum__44FF419A];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__TypeOfHea__45F365D3];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__MaxLoadin__46E78A0C];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__TheVolume__47DBAE45];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__DryerMode__48CFD27E];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Goods]...';


GO
ALTER TABLE [dbo].[Goods] DROP CONSTRAINT [DF__Goods__Color__49C3F6B7];


GO
PRINT N'Altering [dbo].[Customer]...';


GO
ALTER TABLE [dbo].[Customer]
    ADD [RoleId]   INT            DEFAULT 1 NULL,
        [Password] NVARCHAR (100) DEFAULT NULL NULL;


GO
PRINT N'Starting rebuilding table [dbo].[Goods]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Goods] (
    [Id]                       INT           IDENTITY (1, 1) NOT NULL,
    [Brand]                    NVARCHAR (30) NULL,
    [Model]                    NVARCHAR (30) NULL,
    [CountryId]                INT           NULL,
    [YearOfManufacture]        DATE          NULL,
    [Weight]                   FLOAT (53)    NULL,
    [PowerConsumption]         FLOAT (53)    DEFAULT NULL NULL,
    [RemoteStart]              BIT           DEFAULT NULL NULL,
    [NumberOfOperatingModes]   INT           DEFAULT NULL NULL,
    [VolumeOfTheDustContainer] FLOAT (53)    DEFAULT NULL NULL,
    [VolumeOfTheLiquidTank]    FLOAT (53)    DEFAULT NULL NULL,
    [AutomaticCleaning]        BIT           DEFAULT NULL NULL,
    [BodyMaterial]             NVARCHAR (30) DEFAULT NULL NULL,
    [TemperatureMaintenance]   BIT           DEFAULT NULL NULL,
    [ChamberVolume]            FLOAT (53)    DEFAULT NULL NULL,
    [InnerCoating]             NVARCHAR (30) DEFAULT NULL NULL,
    [BowlVolume]               FLOAT (53)    DEFAULT NULL NULL,
    [TypeOfHeating]            NVARCHAR (30) DEFAULT NULL NULL,
    [MaxLoading]               FLOAT (53)    DEFAULT NULL NULL,
    [TheVolumeOfTheDrum]       FLOAT (53)    DEFAULT NULL NULL,
    [DryerMode]                BIT           DEFAULT NULL NULL,
    [Color]                    NVARCHAR (30) DEFAULT NULL NULL,
    [Price]                    DECIMAL (18)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Goods])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Goods] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Goods] ([Id], [CountryId], [YearOfManufacture], [Weight], [PowerConsumption], [RemoteStart], [NumberOfOperatingModes], [VolumeOfTheDustContainer], [VolumeOfTheLiquidTank], [AutomaticCleaning], [BodyMaterial], [TemperatureMaintenance], [ChamberVolume], [InnerCoating], [BowlVolume], [TypeOfHeating], [MaxLoading], [TheVolumeOfTheDrum], [DryerMode], [Color], [Price])
        SELECT   [Id],
                 [CountryId],
                 [YearOfManufacture],
                 [Weight],
                 [PowerConsumption],
                 [RemoteStart],
                 [NumberOfOperatingModes],
                 [VolumeOfTheDustContainer],
                 [VolumeOfTheLiquidTank],
                 [AutomaticCleaning],
                 [BodyMaterial],
                 [TemperatureMaintenance],
                 [ChamberVolume],
                 [InnerCoating],
                 [BowlVolume],
                 [TypeOfHeating],
                 [MaxLoading],
                 [TheVolumeOfTheDrum],
                 [DryerMode],
                 [Color],
                 [Price]
        FROM     [dbo].[Goods]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Goods] OFF;
    END

DROP TABLE [dbo].[Goods];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Goods]', N'Goods';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [dbo].[PaymentType]...';


GO
ALTER TABLE [dbo].[PaymentType] DROP COLUMN [Type];


GO
ALTER TABLE [dbo].[PaymentType]
    ADD [Name] NVARCHAR (30) NULL;


GO
PRINT N'Creating [dbo].[Role]...';


GO
CREATE TABLE [dbo].[Role] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Altering [dbo].[SelectAllOrderByCustomerId]...';


GO
ALTER PROCEDURE [dbo].[SelectAllOrderByCustomerId]
	@id int
AS
	select 
     o.id, 
   S.Id, S.Name, S.CityId, S.Address, S.Phone,
   PT.Id,  PT.Name,
   SO.Id,  SO.Name, 
   C. Id, C.Name, C.LastName, C.Address, c.Phone    
   from dbo.[Order] as O
join dbo.Customer as C on C.Id = O.CustomerId
join dbo.Storage as S on S.Id = O.StorageId
join dbo.PaymentType as PT on PT.Id = O.PaymentTypeId
join dbo.StatusOrder as SO on So.Id = O.StatusOrderId
where O.CustomerId = @Id
GO
PRINT N'Altering [dbo].[SelectAllOrderByStorageId]...';


GO
ALTER PROCEDURE [dbo].[SelectAllOrderByStorageId]
@id int
AS
select 
    o.id, 
   S.Id, S.Name, S.CityId, S.Address, S.Phone,
   PT.Id,  PT.Name,
   SO.Id,  SO.Name, 
   C. Id, C.Name, C.LastName, C.Address, c.Phone    
   from dbo.[Order] as O
join dbo.Customer as C on C.Id = O.CustomerId
join dbo.Storage as S on S.Id = O.StorageId
join dbo.PaymentType as PT on PT.Id = O.PaymentTypeId
join dbo.StatusOrder as SO on So.Id = O.StatusOrderId
where O.StorageId = @Id
GO
PRINT N'Altering [dbo].[SelectCustomerById]...';


GO
ALTER PROCEDURE [dbo].[SelectCustomerById]
	@id int
AS
	SELECT Cu.Id, Cu.Name, Cu.LastName, Cu.Phone, Cu.Email, R.Id, R.Name, C.Id, C.Name as Country,Cy.Id,  Cy.Name as City from dbo.Customer AS Cu
	join dbo.Country as C on C.id = Cu.CountryId
	join dbo.City as Cy on Cy.id = Cu.CityId
	join dbo.Role as R on R.id = Cu.RoleId
	Where Cu.Id = @Id
GO
PRINT N'Altering [dbo].[SelectOrderById]...';


GO
ALTER PROCEDURE [dbo].[SelectOrderById]
		@id int
AS
select 
   o.id, 
   S.Id, S.Name, S.CityId, S.Address, S.Phone,
   PT.Id,  PT.Name,
   SO.Id,  SO.Name, 
   C. Id, C.Name, C.LastName, C.Address, c.Phone    
   from dbo.[Order] as O
join dbo.Customer as C on C.Id = O.CustomerId
join dbo.Storage as S on S.Id = O.StorageId
join dbo.PaymentType as PT on PT.Id = O.PaymentTypeId
join dbo.StatusOrder as SO on So.Id = O.StatusOrderId
where O.Id = @Id
GO
PRINT N'Altering [dbo].[SelectAllQuantityGoods]...';


GO
ALTER PROCEDURE [dbo].[SelectAllQuantityGoods]
AS
SELECT G.Id , G.Brand,G.Model, G.Price, CY.Id, CY.Name as City, S.Id, S.Name as StorageName, S.Address,s.Phone,S.Email,GS.Id, GS.QuantityGoods from dbo.Goods_Storage as GS
	join dbo.Goods as G on G.Id = GS.GoodsId	
	join dbo.Storage as S on s.Id = GS.StorageId	
	left join dbo.City as CY on CY.Id = s.CityId
GO
PRINT N'Altering [dbo].[SelectOrderGoodsByOrderId]...';


GO
ALTER PROCEDURE [dbo].[SelectOrderGoodsByOrderId]
 @orderId int 
	
AS
select 
	o.id, 
    S.Id, S.Name, S.CityId, S.Address, S.Phone,
    PT.Id,  PT.Name,
    SO.Id,  SO.Name, 
    C. Id, C.Name, C.LastName, C.Address, c.Phone  ,  
    G.Id, G.Brand, G.Model, G.Price ,
	OG.Id , Og.quantityGoods
   from dbo.[Order_Goods] as OG
join dbo.[Order] as O on O.Id = @orderId
join dbo.Goods as G on G.Id = OG.goodsId
left join dbo.Customer as C on C.Id = O.CustomerId
left join dbo.Storage as S on S.Id = O.StorageId
left join dbo.PaymentType as PT on PT.Id = O.PaymentTypeId
left join dbo.StatusOrder as SO on So.Id = O.StatusOrderId
where O.Id = @orderId
GO
PRINT N'Altering [dbo].[SelectQuantityGoodsByStorageId]...';


GO
ALTER PROCEDURE [dbo].[SelectQuantityGoodsByStorageId]
	@id int
	
AS
SELECT G.Id , G.Brand,G.Model, G.Price, CY.Id, CY.Name as City, S.Id, S.Name as StorageName, S.Address,s.Phone,S.Email,GS.Id, GS.QuantityGoods from dbo.Goods_Storage as GS
	join dbo.Goods as G on G.Id = GS.GoodsId	
	join dbo.Storage as S on s.Id = GS.StorageId	
	left join dbo.City as CY on CY.Id = s.CityId
	where GS.StorageId = @id
GO
PRINT N'Altering [dbo].[AddOrUpdate]...';


GO
ALTER PROCEDURE [dbo].[AddOrUpdate]
@GoodsId int ,
	@StorageId int,
	@Quantity int,
	@Sale bit = 0
AS
declare
@result bigint
set @result = @GoodsId
if exists(  select * from dbo.Goods_Storage as GS where GS.GoodsId = @GoodsId and StorageId = @StorageId)
 begin
	if(@Sale = 0)
	begin
	 update dbo.Goods_Storage
	  set 
	   QuantityGoods += @Quantity
	end
	else
	begin
	  update dbo.Goods_Storage
	   set 
	    QuantityGoods -= @Quantity
	end
 end
else
 begin
	insert into dbo.Goods_Storage
	values(@GoodsId,@StorageId,@Quantity)
 if(@result is null)set @result = SCOPE_IDENTITY()
 end

select * from dbo.Goods_Storage as GS
where gs.Id = @result
GO
PRINT N'Altering [dbo].[SearchGoods]...';


GO
ALTER PROCEDURE [dbo].[SearchGoods]
@Id INT = null,
	@Brand nvarchar (30) = null,		
	@Model nvarchar (100) = null,		
	@CountryId int =  null,	
	@YearOfManufactureStart date = null,
	@YearOfManufactureEnd date = null,	
	@PowerConsumptionStart float = null,
	@PowerConsumptionEnd float = null,
	@RemoteStart bit = null,
	@NumberOfOperatingModes  int = null,
	@VolumeOfTheDustContainer float = null,
	@VolumeOfTheLiquidTank float = null,
	@AutomaticCleaning bit = null,
	@BodyMaterial nvarchar (30) = null,
	@TemperatureMaintenance bit = null,
	@ChamberVolume float = null,
	@InnerCoating nvarchar(30) = null,
	@BowlVolume float = null,
	@TypeOfHeating nvarchar(30) = null,
	@MaxLoading float = null,
	@TheVolumeOfTheDrum float= null,
	@DryerMode bit = null,
	@ColorId nvarchar(30) = null,
	@PriceStart decimal = null,
	@PriceEnd decimal = null
AS
begin
	DECLARE @resultSQL nvarchar (max) = '
	SELECT 
		Co.Id,
		Co.Name as Color,
		C.Id,
		C.name as Manufacture,
		G.Id ,	
		G.Brand ,
		G.Model ,		
		G.YearOfManufacture,
		G.[Weight] ,
		G.PowerConsumption,
		G.RemoteStart ,
		G.NumberOfOperatingModes  ,
		G.VolumeOfTheDustContainer ,
		G.VolumeOfTheLiquidTank ,
		G.AutomaticCleaning,
		G.BodyMaterial ,
		G.TemperatureMaintenance ,
		G.ChamberVolume,
		G.InnerCoating ,
		G.BowlVolume ,
		G.TypeOfHeating ,
		G.MaxLoading ,
		G.TheVolumeOfTheDrum ,
		G.DryerMode ,
		G.Price
    FROM    [dbo].[Goods] as G
	inner JOIN dbo.[Country] as C on G.[CountryId] = C.Id
	join dbo.Color as Co on Co.id = G.ColorId	
    WHERE   (1=1)'
	
	if( @Id IS NOT NULL)
		begin 
			set @resultSQL += ' and G.[Id] = ' + CONVERT(nvarchar, @Id)
		end
	if( @Brand IS NOT NULL)
		begin      
			set @resultSQL += ' and G.Brand LIKE ' + '''%' + CONVERT(nvarchar(50), @Brand) + '%'''     
		end 
	if( @Model IS NOT NULL)
		begin      
			set @resultSQL += ' and G.Model LIKE ' + '''%' + CONVERT(nvarchar(50), @Model) + '%'''     
    end 
    if( @BodyMaterial IS NOT NULL)
		begin    
			set @resultSQL += ' and G.BodyMaterial LIKE ' + '''%' + CONVERT(nvarchar(50), @BodyMaterial) + '%'''     
		end
	if( @YearOfManufactureStart IS NOT NULL)
		begin
			set @resultSQL += ' and (G.YearOfManufacture BETWEEN '+ '''' 
			+ CONVERT(nvarchar, @YearOfManufactureStart) + ''' AND ' + '''' 
			+ CONVERT(nvarchar, @YearOfManufactureEnd) + ''')'
		end
    if( @InnerCoating IS NOT NULL)
		begin     
			set @resultSQL += ' and G.InnerCoating LIKE ' + '''%' + CONVERT(nvarchar(50), @InnerCoating) + '%'''      
		end
    if( @TypeOfHeating IS NOT NULL)
		begin     
			set @resultSQL += ' and G.TypeOfHeating LIKE ' + '''%' + CONVERT(nvarchar(50), @TypeOfHeating) + '%'''      
		end
	if( @CountryId IS NOT NULL)
		begin
			set @resultSQL += ' and G.CountryId = ' + CONVERT(nvarchar(50), @CountryId)
		end
	if( @RemoteStart IS NOT NULL)
		begin
			set @resultSQL += ' and G.RemoteStart = ' + CONVERT(nvarchar, @RemoteStart)
		end
	if( @NumberOfOperatingModes IS NOT NULL)
		begin
			set @resultSQL += ' and G.NumberOfOperatingModes = ' + CONVERT(nvarchar, @NumberOfOperatingModes)
		end
	if( @PowerConsumptionStart IS NOT NULL)
		begin
			set @resultSQL += ' and (G.PowerConsumption BETWEEN '+ '''' 
			+ CONVERT(nvarchar, @PowerConsumptionStart) + ''' AND ' + '''' 
			+ CONVERT(nvarchar, @PowerConsumptionEnd) + ''')'
		end
	if( @VolumeOfTheDustContainer IS NOT NULL)
		begin
			set @resultSQL += ' and G.VolumeOfTheDustContainer = ' + CONVERT(nvarchar, @VolumeOfTheDustContainer)
		end
	if( @VolumeOfTheLiquidTank IS NOT NULL)
		begin
			set @resultSQL += ' and G.VolumeOfTheLiquidTank = ' + CONVERT(nvarchar, @VolumeOfTheLiquidTank)
		end
	if( @AutomaticCleaning IS NOT NULL)
		begin
			set @resultSQL += ' and G.AutomaticCleaning = ' + CONVERT(nvarchar, @AutomaticCleaning)
		end
	if( @TemperatureMaintenance IS NOT NULL)
		begin
			set @resultSQL += ' and G.TemperatureMaintenance = ' + CONVERT(nvarchar, @TemperatureMaintenance)
		end
	if( @ChamberVolume IS NOT NULL)
		begin
			set @resultSQL += ' and G.ChamberVolume = ' + CONVERT(nvarchar, @ChamberVolume)
		end
	if( @BowlVolume IS NOT NULL)
		begin
			set @resultSQL += ' and G.BowlVolume = ' + CONVERT(nvarchar, @BowlVolume)
		end
	if( @TheVolumeOfTheDrum IS NOT NULL)
		begin
			set @resultSQL += ' and G.TheVolumeOfTheDrum = ' + CONVERT(nvarchar, @TheVolumeOfTheDrum)
		end
	if( @MaxLoading IS NOT NULL)
		begin
			set @resultSQL += ' and G.MaxLoading = ' + CONVERT(nvarchar, @MaxLoading)
		end
	if( @DryerMode IS NOT NULL)
		begin
			set @resultSQL += ' and G.DryerMode = ' + CONVERT(nvarchar, @DryerMode)
		end	
		if( @ColorID IS NOT NULL)
    begin    
      set @resultSQL += ' and G.ColorId LIKE ' + '''%' + CONVERT(nvarchar(50), @ColorId) + '%'''     
    end
	if( @PriceStart IS NOT NULL)
		begin
			set @resultSQL += ' and (G.Price BETWEEN '+ '''' 
			+ CONVERT(nvarchar, @PriceStart) + ''' AND ' + '''' 
			+ CONVERT(nvarchar, @PriceEnd) + ''')'
		end
		set @resultSQL += ' OPTION (RECOMPILE)'
		Print @resultSQL
		exec sp_executesql @resultSQL			
end
GO
PRINT N'Creating [dbo].[MergeGoods]...';


GO
CREATE PROCEDURE [dbo].[MergeGoods]
	@Id INT = null,
	@Brand nvarchar (30)  = null,	
	@Model nvarchar (100)  = null,	
	@CountryId int =  null,	
	@YearOfManufacture date = null,
	@Weight float = null,
	@PowerConsumption float = null,
	@RemoteStart bit = null,
	@NumberOfOperatingModes  int = null,
	@VolumeOfTheDustContainer float = null,
	@VolumeOfTheLiquidTank float = null,
	@AutomaticCleaning bit = null,
	@BodyMaterial nvarchar (30) = null,
	@TemperatureMaintenance bit = null,
	@ChamberVolume float = null,
	@InnerCoating nvarchar(30) = null,
	@BowlVolume float = null,
	@TypeOfHeating nvarchar(30) = null,
	@MaxLoading float = null,
	@TheVolumeOfTheDrum float= null,
	@DryerMode bit = null,
	@Color nvarchar(30) = null,
	@Price decimal = null
AS
	declare
@result bigint
set @result = @Id
	Merge dbo.[Goods] as G
	using (select 
		@Id,  
		@Brand ,
		@Model,
		@CountryId,	
		@YearOfManufacture,
		@Weight ,
		@PowerConsumption,
		@RemoteStart ,
		@NumberOfOperatingModes  ,
		@VolumeOfTheDustContainer ,
		@VolumeOfTheLiquidTank ,
		@AutomaticCleaning,
		@BodyMaterial ,
		@TemperatureMaintenance ,
		@ChamberVolume,
		@InnerCoating ,
		@BowlVolume ,
		@TypeOfHeating ,
		@MaxLoading ,
		@TheVolumeOfTheDrum ,
		@DryerMode ,
		@Color,
		@Price )
	As sourse (
		Id,  
		Brand ,
		Model,
		CountryId,	
		YearOfManufacture,
		[Weight],
		PowerConsumption,
		RemoteStart ,
		NumberOfOperatingModes  ,
		VolumeOfTheDustContainer ,
		VolumeOfTheLiquidTank ,
		AutomaticCleaning,
		BodyMaterial ,
		TemperatureMaintenance ,
		ChamberVolume,
		InnerCoating ,
		BowlVolume ,
		TypeOfHeating ,
		MaxLoading ,
		TheVolumeOfTheDrum ,
		DryerMode ,
		Color,
		Price)
			on	(G.Id = sourse.Id) 
	When MATCHED THEN 
	Update  set		
		Id = sourse.Id,  
		Brand = sourse.Brand ,		
		Model = sourse.Model ,		
		CountryId = sourse.CountryId,	
		YearOfManufacture = sourse.YearOfManufacture,
		[Weight] = sourse.[Weight] ,
		PowerConsumption = sourse.PowerConsumption,
		RemoteStart = sourse.RemoteStart ,
		NumberOfOperatingModes = sourse.NumberOfOperatingModes  ,
		VolumeOfTheDustContainer = sourse.VolumeOfTheDustContainer,
		VolumeOfTheLiquidTank  = sourse.VolumeOfTheLiquidTank,
		AutomaticCleaning = sourse.AutomaticCleaning,
		BodyMaterial = sourse.BodyMaterial ,
		TemperatureMaintenance  = sourse.TemperatureMaintenance,
		ChamberVolume = sourse.ChamberVolume,
		InnerCoating = sourse.InnerCoating ,
		BowlVolume  = sourse.BowlVolume,
		TypeOfHeating  = sourse.TypeOfHeating,
		MaxLoading = sourse.MaxLoading ,
		TheVolumeOfTheDrum = sourse.TheVolumeOfTheDrum ,
		DryerMode = sourse.DryerMode ,
		Price = sourse.Price,
		Color = sourse.Color		
	WHEN NOT MATCHED THEN	
	insert (  
		Brand ,
		Model,
		CountryId,	
		YearOfManufacture,
		[Weight] ,
		PowerConsumption,
		RemoteStart ,
		NumberOfOperatingModes  ,
		VolumeOfTheDustContainer ,
		VolumeOfTheLiquidTank ,
		AutomaticCleaning,
		BodyMaterial ,
		TemperatureMaintenance ,
		ChamberVolume,
		InnerCoating ,
		BowlVolume ,
		TypeOfHeating ,
		MaxLoading ,
		TheVolumeOfTheDrum ,
		DryerMode ,
		Color,
		Price) 
	values (		 
		sourse.Brand ,			
		sourse.Model ,			
		sourse.CountryId,	
		sourse.YearOfManufacture,
		sourse.[Weight] ,
		sourse.PowerConsumption,
		sourse.RemoteStart ,
		sourse.NumberOfOperatingModes  ,
		sourse.VolumeOfTheDustContainer,
		sourse.VolumeOfTheLiquidTank,
		sourse.AutomaticCleaning,
		sourse.BodyMaterial ,
		sourse.TemperatureMaintenance,
		sourse.ChamberVolume,
		sourse.InnerCoating ,
		sourse.BowlVolume,
		sourse.TypeOfHeating,
		sourse.MaxLoading ,
		sourse.TheVolumeOfTheDrum ,
		sourse.DryerMode ,
		sourse.Color,
		sourse.Price
	);
	If(@result is Null)set @result = SCOPE_IDENTITY()
	exec SearchGoods @result
GO
PRINT N'Creating [dbo].[MergeOrder]...';


GO
CREATE PROCEDURE [dbo].[MergeOrder]
	@id int = null,
	@CustomerId int = null,
	@PaymentTypeId int =null,
	@StatusOrderId int = null,
	@TotalCost decimal = null,	
	@quantity int = null
AS
declare @result int
set @result = @id
Merge dbo.[Order] AS O
using (select
	   @id,
	   @CustomerId,
	   @PaymentTypeId ,
	   @StatusOrderId, 	   
	   @TotalCost)
as sourse (
	   id,
	   CustomerId,
	   PaymentTypeId,
	   StatusOrderId,
	   TotalCost)
on (O.Id = sourse.Id)
WHEN MATCHED THEN 
update   set
		PaymentTypeId = @PaymentTypeId,	 
		StatusOrderId = @StatusOrderId,
		TotalCost = @TotalCost
WHEN NOT MATCHED THEN	
insert  (
	    CustomerId,
	    PaymentTypeId,
	    StatusOrderId,
	    TotalCost)
values(
	    @CustomerId,
	    @PaymentTypeId ,
	    @StatusOrderId, 
	    Sysdatetime(),
	    @TotalCost);  
if(@result is NUll) set  @result = SCOPE_IDENTITY()

exec SelectOrderById @result
GO
PRINT N'Creating [dbo].[SelectAllCustomers]...';


GO
CREATE PROCEDURE [dbo].[SelectAllCustomers]	
AS
	SELECT Cu.Id, Cu.Name, Cu.LastName, Cu.Phone, Cu.Email, R.Id, R.Name, C.Id, C.Name as Country,Cy.Id,  Cy.Name as City from dbo.Customer AS Cu
	join dbo.Country as C on C.id = Cu.CountryId
	join dbo.City as Cy on Cy.id = Cu.CityId
	join dbo.Role as R on R.id = Cu.RoleId
GO
PRINT N'Creating [dbo].[TransferGoods]...';


GO
CREATE PROCEDURE [dbo].[TransferGoods]
@sendler int,
	@GoodsId int,
	@recipiend int,
	@Quantity int
AS
declare
@sendlerId int,
@recipiendId int
if exists(  select * from dbo.Goods_Storage as GS where GS.GoodsId = @GoodsId and StorageId = @sendler and (GS.QuantityGoods - @Quantity) > 0)
begin
	Update dbo.Goods_Storage
	set
		QuantityGoods -= @Quantity,
		@sendlerId = Id
	where GoodsId = @GoodsId and StorageId = @sendler
end
else  THROW 404, 'The product is not available in this store', 1;  

if exists(  select * from dbo.Goods_Storage as GS where GS.GoodsId = @GoodsId and StorageId = @recipiend )
begin
	Update dbo.Goods_Storage 
	set
		QuantityGoods += @Quantity,
		@recipiendId = id
	where GoodsId = @GoodsId and StorageId = @recipiend
end
else
 begin
	insert into dbo.Goods_Storage
	values(@GoodsId,@recipiend,@Quantity)
 set @recipiendId = SCOPE_IDENTITY()
end

select @sendlerId, @recipiendId
GO
PRINT N'Altering [dbo].[MergeCustomer]...';


GO
ALTER PROCEDURE [dbo].[MergeCustomer]
	@Id INT ,
	@Name nvarchar(30),
	@LastName nvarchar(30),
	@Email nvarchar(30),
	@Phone nvarchar(30),
	@Address nvarchar(30),
	@CountryId int,
	@CityId int,
	@Password  nvarchar(100)
AS
declare @result int
set @result = @Id
Merge dbo.[Customer] AS C
using (select
	@id,
	@Name,
	@LastName,
	@Email,
	@Phone,
	@Address,
	@CountryId,
	@CityId)
AS sourse(
	id,
	Name,
	LastName,
	Email,
	Phone,
	Address,
	CountryId,
	CityId)
on(C.id = sourse.id)
WHEN MATCHED THEN
Update set
	Name = sourse.Name,
	LastName = sourse.LastName,
	Email = sourse.Email,
	Phone = sourse.Phone,
	Address = sourse.Address,
	CountryId = sourse.CountryId,
	CityId = sourse.CityId
WHEN NOT MATCHED THEN
insert (
	Name,
	LastName,
	Email,
	Phone,
	Address,
	CountryId,
	CityId)
values (
	@Name,
	@LastName,
	@Email,
	@Phone,
	@Address,
	@CountryId,
	@CityId);

if (@result is null)set @result = SCOPE_IDENTITY()

exec SelectCustomerById @result
GO
PRINT N'Update complete.';


GO
